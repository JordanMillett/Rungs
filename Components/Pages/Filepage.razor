@page "/search/{url?}"
@inject HttpClient Http
@inject ProfileService ProfileService
@inject FileService FileService

@if (!Loading)
{
    @if(FileFound && URL != null && FileService.AllFiles.ContainsKey(URL))
    {        
        <PageTitle>@FileService.AllFiles[URL].Title</PageTitle>
        
        <div id="container">
            <h1 class="title">@FileService.AllFiles[URL].Title</h1>
            <p class="author"><i>@FileService.AllFiles[URL].Author</i></p>
            <br>

            @for (int i = 3; i < Lines.Length; i++)
            {
                if(String.IsNullOrWhiteSpace(Lines[i]))
                {
                    <br>
                }else
                {
                    string[] words = Lines[i].Split(new char[] { ' ', '.', '?', ',', '-', '!', ';', ':', '—', '"', '\'', '–'}, StringSplitOptions.RemoveEmptyEntries);
                    
                    <p>
                        @foreach (string word in words)
                        {      
                            <span class="@(FileService.AllTerms.ContainsKey(word.ToLower()) ? "highlightable" : "missing") @(ProfileService.HasTerm(word) ? "added" : "")"
                                @onclick="() => ProfileService.ToggleTerm(word)">
                                @word
                            </span>
                            
                            @if (!word.Equals(words.Last()))
                            {
                                <span>&nbsp;</span>
                            }
                        }
                    </p>
                }
            }
        </div>
    }else
    {
        <PageTitle>Missing</PageTitle>
        <p>File @URL not found.</p>
    }
}else
{
    <p></p>
}

@code
{
    [Parameter]
    public string? URL { get; set; }

    string Text = "";
    string[] Lines = new string[0];

    bool FileFound = false;
    bool Loading = true;

    protected override async Task OnParametersSetAsync()
    {
        Loading = true;
        FileFound = false;

        if (URL == null)
        {
            FileFound = false;
        }
        else
        {
            HttpResponseMessage Message = await Http.GetAsync("data/" + FileService.AllFiles[URL].Category + "/" + URL + ".txt");
            if (Message.IsSuccessStatusCode)
            {
                byte[] Data = await Message.Content.ReadAsByteArrayAsync();
                Text = Encoding.UTF8.GetString(Data);

                Lines = Text.Split(new string[] { "\n" }, StringSplitOptions.None);
                
                await ProfileService.UpdateRecent(URL);

                FileFound = true;
            }else
            {
                FileFound = false;
            }
        }

        Loading = false;
    }
}